/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define NUM_L 2
#define MED_L 3
#define FUN_L 4

&lt { quick-tap-ms = <50>; };

&mt {
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
    flavor = "tap-preferred";
};

/ {
    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <1 2>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        left-square-bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
        };

        right-square-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q    &kp W       &kp E         &kp R         &kp T          &kp Y        &kp U        &kp I        &kp O       &kp P     &none
&none  &kp A    &mt LALT S  &mt LCTRL D   &mt LSHIFT F  &kp G          &kp H        &mt RSHFT J  &mt RCTRL K  &mt RALT L  &kp SEMI  &none
&none  &lt 3 Z  &kp X       &kp C         &kp V         &kp B          &kp N        &kp M        &kp COMMA    &kp DOT     &kp FSLH  &none
                            &mt LGUI ESC  &lt 2 TAB     &lt 1 SPACE    &lt 1 ENTER  &lt 2 BSPC   &lt 3 DEL
            >;
        };

        lower_layer {
            bindings = <
&none  &kp N1     &kp N2     &kp N3    &kp N4             &kp N5       &kp N6          &kp N7       &kp N8    &kp N9          &kp N0           &none
&none  &kp EXCL   &kp AT     &kp HASH  &kp DLLR           &kp PRCNT    &kp CARET       &kp AMPS     &kp STAR  &kp LPAR        &kp RPAR         &none
&none  &kp GRAVE  &kp TILDE  &kp SQT   &kp DOUBLE_QUOTES  &kp MINUS    &kp UNDERSCORE  &kp LBKT     &kp RBKT  &kp LEFT_BRACE  &kp RIGHT_BRACE  &none
                             &kp BSLH  &lt 2 PIPE         &none        &none           &lt 2 EQUAL  &kp PLUS
            >;
        };

        raise_layer {
            bindings = <
&none  &kp K_UNDO  &kp HOME  &kp UP    &kp PG_UP  &kp LC(X)     &kp KP_SLASH     &kp KP_N7  &kp KP_N8     &kp KP_N9  &kp KP_MINUS  &none
&none  &kp CAPS    &kp LEFT  &kp DOWN  &kp RIGHT  &kp LC(V)     &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5     &kp KP_N6  &kp KP_PLUS   &none
&none  &kp K_REDO  &kp END   &kp INS   &kp PG_DN  &kp LC(C)     &kp KP_DOT       &kp KP_N1  &kp KP_N2     &kp KP_N3  &kp KP_N0     &none
                             &kp LALT  &kp LCTRL  &kp LSHIFT    &kp DEL          &none      &kp KP_ENTER
            >;
        };

        fn_layer {
            bindings = <
&none  &none          &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none    &kp F12  &kp F7  &kp F8  &kp F9  &none  &none
&none  &kp LG(SPACE)  &kp LALT    &kp LCTRL          &kp LSHIFT       &none    &kp F11  &kp F4  &kp F5  &kp F6  &none  &none
&none  &none          &none       &kp KP_NUMLOCK     &kp PRINTSCREEN  &none    &kp F10  &kp F1  &kp F2  &kp F3  &none  &none
                                  &none              &none            &none    &none    &none   &none
            >;
        };

        adjust_layer {
            bindings = <
&none  &bootloader   &sys_reset    &none         &none         &none           &none         &none         &none         &sys_reset    &bootloader   &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
&none  &bt BT_CLR    &none         &none         &none         &none           &none         &none         &none         &none         &bt BT_CLR    &none
                                   &trans        &none         &trans          &none         &trans        &trans
            >;
        };
    };
};
